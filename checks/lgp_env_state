#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# vim:sta:si:sw=4:sts=4:et:
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# The Check_MK official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Check has been developed using a Emerson Network Power
# Manufacturer			Liebert Corporation
# Device Model			Liebert HIMOD
# Device Firmware Version	PAL 1.04.029.STD
# Agent Type			IntelliSlot Web Card
# Agent App Firmware Version	3.210.0
# Agent App Firmware Label	IS-WEBLBDS_HID7_3.210.0_046175
# Agent Boot Firmware Version	3.210.0
# Agent Boot Firmware Label	IS-WEBLBDS_HID7_3.210.0_046175
# Agent Hardware ID		7
#
# +------------------------------------------------------------------+
# | This file has been contributed by:                               |
# |                                                                  |
# | Václav Ovsík <vaclav.ovsik@gmail.com>             Copyright 2012 |
# +------------------------------------------------------------------+

# Example info:
#  [[['1', '2', '2', '2', '1', '2', '2']]]


def inventory_lgp_env_state(info):
    if len(info) != 1 or len(info[0]) != 1:
        return
    ((state,),) = info
    sys, cool, humid, dehumid, fan, genrl_alarm, aud_alarm = state
    inv = []
    if sys <> '':
        inv.append(('System', None))
    if cool <> '':
        inv.append(('Cooling', None))
    if humid <> '':
        inv.append(('Humidifying', None))
    if dehumid <> '':
        inv.append(('Dehumidifying', None))
    if fan <> '':
        inv.append(('Fan', None))
    if genrl_alarm <> '':
        inv.append(('General Alarm', None))
    if aud_alarm <> '':
        inv.append(('Audible Alarm', None))
    return inv

def check_lgp_env_state(item, params, info):
    s_state_sys = { '1':'On', '2':'Off', '3':'Standby' }
    s_state_com = { '1':'On', '2':'Off' }
    ((state,),) = info
    sys, cool, humid, dehumid, fan, genrl_alarm, aud_alarm = state
    if item == 'System':
        return (0, 'OK - System is %s' % (s_state_sys[sys]))
    if item == 'Cooling':
        return (0, 'OK - Cooling is %s' % (s_state_com[cool]))
    if item == 'Humidifying':
        return (0, 'OK - Humidifying is %s' % (s_state_com[humid]))
    if item == 'Dehumidifying':
        return (0, 'OK - Dehumidifying is %s' % (s_state_com[dehumid]))
    if item == 'Fan':
        return (0, 'OK - Fan is %s' % (s_state_com[fan]))
    if item == 'General Alarm':
        if genrl_alarm == '1':
            return (2, 'CRIT - General Alarm is On (!!)')
        elif genrl_alarm == '2':
            return (0, 'OK - General Alarm is Off')
        return (3, 'UNKNOWN - General Alarm is ?')
    if item == 'Audible Alarm':
        if aud_alarm == '1':
            return (2, 'CRIT - Audible Alarm is On (!!)')
        elif aud_alarm == '2':
            return (0, 'OK - Audible Alarm is Off')
        return (3, 'UNKNOWN - Audible Alarm is ?')
    return (3, 'Item can not be found in SNMP output.')

check_info['lgp_env_state'] = (check_lgp_env_state, 'State %s', 0, inventory_lgp_env_state)

snmp_info['lgp_env_state'] = [
    ('.1.3.6.1.4.1.476.1.42.3.4.3', [
        '1.0', # LIEBERT-GP-ENVIRONMENTAL-MIB::lgpEnvStateSystem.0
        '2.0', # LIEBERT-GP-ENVIRONMENTAL-MIB::lgpEnvStateCooling.0
        '4.0', # LIEBERT-GP-ENVIRONMENTAL-MIB::lgpEnvStateHumidifying.0
        '5.0', # LIEBERT-GP-ENVIRONMENTAL-MIB::lgpEnvStateDehumidifying.0
        '7.0', # LIEBERT-GP-ENVIRONMENTAL-MIB::lgpEnvStateFan.0
        '8.0', # LIEBERT-GP-ENVIRONMENTAL-MIB::lgpEnvStateGeneralAlarmOutput.0
        '11.0', # LIEBERT-GP-ENVIRONMENTAL-MIB::lgpEnvStateAudibleAlarm.0
    ]),
]

snmp_scan_functions['lgp_env_state'] = lambda oid: \
        oid('.1.3.6.1.2.1.1.2.0').startswith('.1.3.6.1.4.1.476.1.42')
