#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# vim:sta:si:sw=4:sts=4:et:
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# The Check_MK official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Functions and definitions used by lgp_env_*


def check_lgp_env_levels(key, value, params):

    def get_my_param(subkey):
        return params.get(key + '_' + subkey)

    def has_my_param(subkey):
        return params.has_key(key + '_' + subkey)

    label = get_my_param('label') or key
    levels = get_my_param('levels')
    perfunit = get_my_param('perfunit')
    unit = get_my_param('unit') or perfunit or ''
    if unit == '%':
        unit = '%%'
    info = get_my_param('info') or ('%s: %%.1f%s' % (label, unit))
    status = 0
    txt = info % value
    level = dict.fromkeys(('lc', 'lw', 'hw', 'hc'))
    if levels:
        levels_template = get_my_param('levels_template') or 'lc,lw,hw,hc'
        for k, v in zip(str.split(levels_template, ','), levels):
            level[k] = v
        if level['lc'] is not None and value <= level['lc']:
            status = 2
            txt += ' (!!) <= ' + str(level['lc'])
        elif level['lw'] is not None and value <= level['lw']:
            status = 1
            txt += ' (!) <= ' + str(level['lw'])
        elif level['hc'] is not None and value >= level['hc']:
            status = 2
            txt += ' (!!) >= ' + str(level['hc'])
        elif level['hw'] is not None and value >= level['hw']:
            status = 1
            txt += ' (!) >= ' + str(level['hw'])
    def xstr(x):
        if x is None:
            return ''
        return str(x)
    if has_my_param('perfdata'):
        doperf = get_my_param('perfdata')
    else:
        doperf = params.get('perfdata')
    if doperf:
        if perfunit:
            value = str(value) + perfunit
        perf = (label.replace(' ', '_'), value)
        perf += tuple(map(lambda x: x or None, (
            ':'.join(filter(None, (xstr(level['lw']), xstr(level['hw'])))),
            ':'.join(filter(None, (xstr(level['lc']), xstr(level['hc'])))))))
    else:
        perf = ()
    return (status, txt, perf)

def check_lgp_env_merge_final(*chk):
    stat_result = 0
    txts = []
    perfs = []
    for stat, txt, perf in chk:
        if stat_result < stat:
            if stat != 3 or stat_result == 0:
                stat_result = stat
        if txt:
            txts.append(txt)
        if perf:
            perfs.append(perf)
    stat_txt = {0:'OK', 1:'WARN', 2:'CRIT', 3:'UNKNOWN'}[stat_result]
    return (stat_result, stat_txt + ' - ' + ', '.join(txts), perfs)

def check_lgp_env_chk_levels_final(key, value, params):
    return check_lgp_env_merge_final(
            check_lgp_env_levels(key, value, params)
            )


factory_settings["lgp_env_default_levels"] = {

# Default parameters

#
#       common / global parameters
#
        'perfdata'  : True,

#
#       lgp_env_hum
#
        'humidity_control_label'        : 'Control humidity',
        'humidity_control_perfunit'     : '%',
        'humidity_control_levels'       : ( 20, 30, 70, 80 ),

        'humidity_return_air_label'     : 'Return air humidity',
        'humidity_return_air_perfunit'  : '%',

        'humidity_supply_air_label'     : 'Supply air humidity',
        'humidity_supply_air_perfunit'  : '%',

#
#       lgp_env_temp
#
        'temp_control_label'        : 'Control temperature',
        'temp_control_unit'         : u'°C',
        'temp_control_levels'       : ( 14, 16, 26, 28 ),

        'temp_return_air_label'     : 'Return air temperature',
        'temp_return_air_unit'      : u'°C',

        'temp_supply_air_label'     : 'Supply air temperature',
        'temp_supply_air_unit'      : u'°C',
}
